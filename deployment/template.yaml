AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Order Processing System with Cross-Cutting X-Ray DynamoDB Tracing
Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
    - dev
    - staging
    - prod
    Description: Environment name
  ProjectName:
    Type: String
    Default: order-processing-v2
    Description: Project name for resource naming
Globals:
  Function:
    Timeout: 30
    MemorySize: 512
    Runtime: python3.13
    Tracing: Active
    Environment:
      Variables:
        ORDERS_TABLE:
          Ref: OrdersTable
        INVENTORY_TABLE:
          Ref: InventoryTable
        PAYMENTS_TABLE:
          Ref: PaymentsTable
        IDEMPOTENCY_TABLE:
          Ref: IdempotencyTable
        EVENT_BUS_NAME:
          Ref: OrderProcessingEventBus
        AUTH_TOKEN: demo-token
        AWS_XRAY_TRACING_NAME:
          Fn::Sub: ${ProjectName}-${Environment}
        AWS_XRAY_CONTEXT_MISSING: LOG_ERROR
Resources:
  OrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: ${ProjectName}-${Environment}-Orders
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: orderId
        AttributeType: S
      KeySchema:
      - AttributeName: orderId
        KeyType: HASH
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
      - Key: Environment
        Value:
          Ref: Environment
      - Key: Project
        Value:
          Ref: ProjectName
  InventoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: ${ProjectName}-${Environment}-Inventory
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: vendorId
        AttributeType: S
      - AttributeName: productId
        AttributeType: S
      KeySchema:
      - AttributeName: vendorId
        KeyType: HASH
      - AttributeName: productId
        KeyType: RANGE
      GlobalSecondaryIndexes:
      - IndexName: ProductIndex
        KeySchema:
        - AttributeName: productId
          KeyType: HASH
        Projection:
          ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
      - Key: Environment
        Value:
          Ref: Environment
      - Key: Project
        Value:
          Ref: ProjectName
  PaymentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: ${ProjectName}-${Environment}-Payments
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: paymentId
        AttributeType: S
      - AttributeName: orderId
        AttributeType: S
      KeySchema:
      - AttributeName: paymentId
        KeyType: HASH
      GlobalSecondaryIndexes:
      - IndexName: OrderIndex
        KeySchema:
        - AttributeName: orderId
          KeyType: HASH
        Projection:
          ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
      - Key: Environment
        Value:
          Ref: Environment
      - Key: Project
        Value:
          Ref: ProjectName
  IdempotencyTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: ${ProjectName}-${Environment}-IdempotencyKeys
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: expiration
        Enabled: true
      Tags:
      - Key: Environment
        Value:
          Ref: Environment
      - Key: Project
        Value:
          Ref: ProjectName

  # EventBridge for async processing
  OrderProcessingEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name:
        Fn::Sub: ${ProjectName}-${Environment}-events
      Tags:
      - Key: Environment
        Value:
          Ref: Environment
      - Key: Project
        Value:
          Ref: ProjectName

  OrderProcessingApi:
    Type: AWS::Serverless::Api
    Properties:
      Name:
        Fn::Sub: ${ProjectName}-${Environment}-api
      StageName:
        Ref: Environment
      TracingEnabled: true
      Cors:
        AllowMethods: '''GET,POST,PUT,DELETE,OPTIONS'''
        AllowHeaders: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
        AllowOrigin: '''*'''
  OrderHandler:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${ProjectName}-${Environment}-order-handler
      CodeUri: ../src
      Handler: handlers.order_handler.lambda_handler
      Description: Order processing handler with X-Ray tracing
      Events:
        OrderApi:
          Type: Api
          Properties:
            RestApiId:
              Ref: OrderProcessingApi
            Path: /orders
            Method: post
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: OrdersTable
      - DynamoDBCrudPolicy:
          TableName:
            Ref: InventoryTable
      - DynamoDBCrudPolicy:
          TableName:
            Ref: PaymentsTable
      - DynamoDBCrudPolicy:
          TableName:
            Ref: IdempotencyTable
      - EventBridgePutEventsPolicy:
          EventBusName:
            Ref: OrderProcessingEventBus
    Metadata:
      SamResourceId: OrderHandler
  InventoryHandler:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${ProjectName}-${Environment}-inventory-handler
      CodeUri: ../src
      Handler: handlers.inventory_handler.lambda_handler
      Description: Inventory management handler with X-Ray tracing
      Events:
        InventoryApi:
          Type: Api
          Properties:
            RestApiId:
              Ref: OrderProcessingApi
            Path: /inventory
            Method: post
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: InventoryTable
      - DynamoDBCrudPolicy:
          TableName:
            Ref: IdempotencyTable
    Metadata:
      SamResourceId: InventoryHandler
  PaymentHandler:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${ProjectName}-${Environment}-payment-handler
      CodeUri: ../src
      Handler: handlers.payment_handler.lambda_handler
      Description: Payment processing handler with X-Ray tracing
      Events:
        PaymentApi:
          Type: Api
          Properties:
            RestApiId:
              Ref: OrderProcessingApi
            Path: /payments
            Method: post
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: PaymentsTable
      - DynamoDBCrudPolicy:
          TableName:
            Ref: IdempotencyTable
    Metadata:
      SamResourceId: PaymentHandler

  # Event Consumers
  InventoryConsumer:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${ProjectName}-${Environment}-inventory-consumer
      CodeUri: ../src
      Handler: events.consumers.inventory_consumer.lambda_handler
      Description: Inventory consumer with X-Ray tracing
      Events:
        InventoryConsumerRule:
          Type: EventBridgeRule
          Properties:
            EventBusName:
              Ref: OrderProcessingEventBus
            Pattern:
              source: ["order.service"]
              detail-type: ["OrderPlaced"]
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: InventoryTable
      - DynamoDBCrudPolicy:
          TableName:
            Ref: IdempotencyTable

  PaymentConsumer:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${ProjectName}-${Environment}-payment-consumer
      CodeUri: ../src
      Handler: events.consumers.payment_consumer.lambda_handler
      Description: Payment consumer with X-Ray tracing
      Events:
        PaymentConsumerRule:
          Type: EventBridgeRule
          Properties:
            EventBusName:
              Ref: OrderProcessingEventBus
            Pattern:
              source: ["order.service"]
              detail-type: ["OrderPlaced"]
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: PaymentsTable
      - DynamoDBCrudPolicy:
          TableName:
            Ref: IdempotencyTable

  NotificationConsumer:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${ProjectName}-${Environment}-notification-consumer
      CodeUri: ../src
      Handler: events.consumers.notification_consumer.lambda_handler
      Description: Notification consumer with X-Ray tracing
      Events:
        NotificationConsumerRule:
          Type: EventBridgeRule
          Properties:
            EventBusName:
              Ref: OrderProcessingEventBus
            Pattern:
              source: ["order.service"]
              detail-type: ["OrderPlaced", "PaymentProcessed", "InventoryUpdated"]
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: OrdersTable

  # Dead Letter Queues
  InventoryDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName:
        Fn::Sub: ${ProjectName}-${Environment}-inventory-dlq
      MessageRetentionPeriod: 1209600
  PaymentDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName:
        Fn::Sub: ${ProjectName}-${Environment}-payment-dlq
      MessageRetentionPeriod: 1209600
  NotificationDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName:
        Fn::Sub: ${ProjectName}-${Environment}-notification-dlq
      MessageRetentionPeriod: 1209600
Outputs:
  OrderProcessingAPIUrl:
    Description: API Gateway endpoint URL for Order Processing
    Value:
      Fn::Sub: https://${OrderProcessingApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/
    Export:
      Name:
        Fn::Sub: ${ProjectName}-${Environment}-APIUrl
  OrdersTableName:
    Description: Orders DynamoDB table name
    Value:
      Ref: OrdersTable
    Export:
      Name:
        Fn::Sub: ${ProjectName}-${Environment}-OrdersTable
  InventoryTableName:
    Description: Inventory DynamoDB table name
    Value:
      Ref: InventoryTable
    Export:
      Name:
        Fn::Sub: ${ProjectName}-${Environment}-InventoryTable
  PaymentsTableName:
    Description: Payments DynamoDB table name
    Value:
      Ref: PaymentsTable
    Export:
      Name:
        Fn::Sub: ${ProjectName}-${Environment}-PaymentsTable

  EventBusName:
    Description: EventBridge bus name
    Value:
      Ref: OrderProcessingEventBus
    Export:
      Name:
        Fn::Sub: ${ProjectName}-${Environment}-EventBus

  XRayTracingInfo:
    Description: X-Ray tracing configuration
    Value:
      Fn::Sub: 'X-Ray enabled with service name: ${ProjectName}-${Environment}'
